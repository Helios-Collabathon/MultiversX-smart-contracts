// Code generated by the multiversx-sc proxy generator. DO NOT EDIT.

////////////////////////////////////////////////////
////////////////// AUTO-GENERATED //////////////////
////////////////////////////////////////////////////

#![allow(dead_code)]
#![allow(clippy::all)]

use multiversx_sc::proxy_imports::*;

pub struct IdentityProxy;

impl<Env, From, To, Gas> TxProxyTrait<Env, From, To, Gas> for IdentityProxy
where
    Env: TxEnv,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    type TxProxyMethods = IdentityProxyMethods<Env, From, To, Gas>;

    fn proxy_methods(self, tx: Tx<Env, From, To, (), Gas, (), ()>) -> Self::TxProxyMethods {
        IdentityProxyMethods { wrapped_tx: tx }
    }
}

pub struct IdentityProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    wrapped_tx: Tx<Env, From, To, (), Gas, (), ()>,
}

#[rustfmt::skip]
impl<Env, From, Gas> IdentityProxyMethods<Env, From, (), Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    Gas: TxGas<Env>,
{
    pub fn init(
        self,
    ) -> TxTypedDeploy<Env, From, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_deploy()
            .original_result()
    }
}

#[rustfmt::skip]
impl<Env, From, To, Gas> IdentityProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    pub fn upgrade(
        self,
    ) -> TxTypedUpgrade<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_upgrade()
            .original_result()
    }
}

#[rustfmt::skip]
impl<Env, From, To, Gas> IdentityProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    pub fn add_wallet<
        Arg0: ProxyArg<Chain>,
        Arg1: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        chain: Arg0,
        address: Arg1,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("addWallet")
            .argument(&chain)
            .argument(&address)
            .original_result()
    }

    pub fn remove_wallet<
        Arg0: ProxyArg<Chain>,
        Arg1: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        chain: Arg0,
        address: Arg1,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("removeWallet")
            .argument(&chain)
            .argument(&address)
            .original_result()
    }

    pub fn get_persona_by_address<
        Arg0: ProxyArg<Chain>,
        Arg1: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        chain: Arg0,
        address: Arg1,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, Persona<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getPersonaByAddress")
            .argument(&chain)
            .argument(&address)
            .original_result()
    }
}

#[type_abi]
#[derive(NestedDecode, NestedEncode, TopEncode, TopDecode, ManagedVecItem, Clone, Debug, PartialEq, Eq)]
pub enum Chain {
    MultiversX,
    Injective,
}

#[type_abi]
#[derive(NestedDecode, NestedEncode, TopEncode, TopDecode, Debug, PartialEq, Eq)]
pub struct Persona<Api>
where
    Api: ManagedTypeApi,
{
    pub id: usize,
    pub wallets: ManagedVec<Api, LinkedWallet<Api>>,
}

#[type_abi]
#[derive(NestedDecode, NestedEncode, TopEncode, TopDecode, ManagedVecItem, Debug, Clone, PartialEq, Eq)]
pub struct LinkedWallet<Api>
where
    Api: ManagedTypeApi,
{
    pub address: ManagedAddress<Api>,
    pub chain: Chain,
}
